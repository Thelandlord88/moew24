---
// src/layouts/MainLayout.astro
// SEO‑safe, performance‑first site shell.

export interface Props {
  title: string;
  description: string;
  canonical?: string;
  image?: string;
  breadcrumb?: object;
}

const { title, description, canonical, image, breadcrumb } = Astro.props;

import { ViewTransitions } from 'astro:transitions';
import Header from '~/components/Header.astro';
import Footer from '~/components/Footer.astro';
import { listSuburbsForCluster } from '~/utils/geoHandler';
import { buildGraph } from '~/utils/schemaGraph.js';
import SchemaGraph from '~/components/SchemaGraph.astro';
import { resolveOrigin } from '~/utils/origin';

// import SmartFooter from '../components/SmartFooter.astro';

import '~/styles/main.css';

import { absoluteUrl } from '~/lib/url';
const siteUrl  = import.meta.env.SITE || 'https://onendonebondclean.com.au';
function withTrailingSlash(u) {
  if (!u) return u;
  try {
  const url = new URL(u, siteUrl);
    // Keep files intact
    if (/\.[a-z0-9]+$/i.test(url.pathname)) return url.toString();
    if (!url.pathname.endsWith('/')) url.pathname += '/';
    return url.toString();
  } catch {
    // Fallback for plain paths
    if (/\.[a-z0-9]+$/i.test(u) || u.endsWith('/') || u.includes('?') || u.includes('#')) return u;
    return u + '/';
  }
}
const rawPageUrl  = canonical
  ? absoluteUrl(canonical)
  : absoluteUrl(Astro.url?.pathname ?? '/');
const pageUrl = withTrailingSlash(rawPageUrl);
// Use a public root asset for social previews by default
const ogImage  = absoluteUrl(image ?? '/og.jpg');

// Aggregate a flat suburb list from known clusters for schema areaServed
const CLUSTERS = ['ipswich','brisbane','logan'];
const suburbs: { slug: string; name: string }[] = CLUSTERS.flatMap(c =>
  (listSuburbsForCluster(c) || []).filter(s => typeof s === 'string').map(s => ({ slug: s as string, name: (s as string).replace(/-/g,' ') }))
);
const localBusinessSchema = {
  "@context": "https://schema.org",
  "@type": "CleaningService",
  "name": "One N Done Bond Clean",
  "url": siteUrl,
  "telephone": "+61405779420",
  "priceRange": "$$",
  "image": ogImage,
  "address": {
    "@type": "PostalAddress",
    "addressLocality": "Redbank Plains",
    "addressRegion": "QLD",
    "postalCode": "4301",
    "addressCountry": "AU"
  },
  "areaServed": suburbs.map(suburb => ({ "@type": "Place", "name": suburb.name })),
  "geo": {
    "@type": "GeoCoordinates",
    "latitude": -27.6413,
    "longitude": 152.9006
  },
  "openingHoursSpecification": [{
    "@type": "OpeningHoursSpecification",
    "dayOfWeek": ["Monday","Tuesday","Wednesday","Thursday","Friday"],
    "opens": "08:00",
    "closes": "18:00"
  }]
};

// Existing graph produced by helper
const schemaGraph = buildGraph({ path: Astro.url?.pathname ?? '/', page: breadcrumb ? { breadcrumb } : {} });

// Fallback WebPage node wiring
const origin = (import.meta.env.SITE || resolveOrigin(Astro));
const url = absoluteUrl(Astro.url?.pathname ?? '/');
let fallbackGraph = [
  {
    '@type': 'WebPage',
    '@id': `${url}#webpage`,
    url,
    isPartOf: { '@id': `${origin}/#website` },
  },
];
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <!-- Astro View Transitions -->
    <meta name="view-transition" content="same-origin" />
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={pageUrl} />
    <meta name="robots" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" />

    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="bond cleaning, end of lease cleaning, exit clean, Redbank Plains, Brisbane, One N Done" />
    <meta name="author" content="One N Done Bond Clean" />
    <meta name="generator" content={Astro.generator} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={pageUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:image:alt" content="Bond cleaning in action by One N Done" />
    <meta property="og:locale" content="en_AU" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@OneNDoneClean" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />

    <!-- Performance hints -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- Site fonts (centralized, non-blocking) -->
    <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Permanent+Marker&family=Quicksand:wght@400;600&display=swap" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Permanent+Marker&family=Quicksand:wght@400;600&display=swap" media="print" onload="this.media='all'" />
    <noscript>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Permanent+Marker&family=Quicksand:wght@400;600&display=swap" />
    </noscript>

    <!-- Enhanced View Transitions -->
    <ViewTransitions />

  <!-- Structured data -->
  <script type="application/ld+json" is:inline set:html={JSON.stringify(localBusinessSchema)} />
  <script type="application/ld+json" is:inline set:html={JSON.stringify(schemaGraph)} />
  <!-- Minimal fallback WebPage JSON-LD (merged post-build) -->
  <SchemaGraph graph={fallbackGraph} />

    <slot name="head" />


    <!-- Google Analytics (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-DCGW9TY7QM"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-DCGW9TY7QM');
    </script>
  </head>
  <body class="bg-slate-50 font-sans text-slate-800 antialiased min-h-screen flex flex-col">
    <a href="#main" class="sr-only focus:not-sr-only focus:fixed focus:top-3 focus:left-3 focus:bg-slate-900 focus:text-white focus:px-3 focus:py-2 focus:rounded focus:z-[100] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400">Skip to content</a>
    <Header suburbs={suburbs} transition:name="header" />

  <main id="main" role="main" tabindex="-1" class="flex-1" transition:name="main-content">
      <slot />
    </main>

    <Footer transition:name="footer" />
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const skip = document.querySelector('a[href="#main"]');
        const focusMain = () => {
          const m = document.getElementById('main');
          if (!m) return;
          // Ensure element is focusable
          if (!m.hasAttribute('tabindex')) m.setAttribute('tabindex', '-1');
          // Focus without scrolling, and re-assert a few times to defeat late steals
          const tick = () => m.focus({ preventScroll: true });
          tick();
          setTimeout(tick, 0);
          requestAnimationFrame(tick);
          setTimeout(tick, 50);
        };
        // Click handler for mouse/keyboard activation that dispatches click
        skip?.addEventListener('click', (e) => {
          e.preventDefault();
          focusMain();
          // Maintain expected URL hash for accessibility tools
          if (location.hash !== '#main') location.hash = 'main';
        });
        // Also handle anchor navigation without our click handler
        window.addEventListener('hashchange', () => {
          if (location.hash === '#main') focusMain();
        });
        if (location.hash === '#main') focusMain();
        
        // Enhanced view transition handling
        document.addEventListener('astro:before-preparation', (event) => {
          // Handle fragment navigation gracefully
          const fromUrl = new URL(event.from.pathname + event.from.search + event.from.hash, location.origin);
          const toUrl = new URL(event.to.pathname + event.to.search + event.to.hash, location.origin);
          
          // If navigating to a fragment on a different page, allow transitions
          // but disable for same-page fragment navigation
          if (fromUrl.pathname === toUrl.pathname && toUrl.hash) {
            event.preventDefault();
            // Handle smooth scroll to fragment instead
            const target = document.querySelector(toUrl.hash);
            if (target) {
              target.scrollIntoView({ behavior: 'smooth', block: 'start' });
              history.pushState({}, '', toUrl);
            }
          }
        });
        
        // Handle back/forward navigation with fragments
        window.addEventListener('popstate', (event) => {
          if (location.hash) {
            const target = document.querySelector(location.hash);
            if (target) {
              setTimeout(() => {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
              }, 100);
            }
          }
        });
      });
    </script>
  </body>
</html>
