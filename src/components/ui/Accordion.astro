---
// src/components/ui/Accordion.astro
/**
 * Advanced Accordion Component
 * Interactive collapsible content sections with smooth animations
 */

interface AccordionItem {
  id: string;
  title: string;
  content: string;
  isOpen?: boolean;
}

interface Props {
  items: AccordionItem[];
  allowMultiple?: boolean;
  variant?: 'default' | 'bordered' | 'filled';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const {
  items,
  allowMultiple = false,
  variant = 'default',
  size = 'md',
  className = ''
} = Astro.props;

const baseClasses = 'accordion-base';
const variantClasses = {
  default: 'accordion-default',
  bordered: 'accordion-bordered',
  filled: 'accordion-filled'
};
const sizeClasses = {
  sm: 'accordion-sm',
  md: 'accordion-md',
  lg: 'accordion-lg'
};

const classes = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  className
].filter(Boolean).join(' ');

// Generate unique IDs for accessibility
const accordionId = `accordion-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={classes} data-accordion-multiple={allowMultiple} id={accordionId}>
  {items.map((item, index) => (
    <div class="accordion-item" data-accordion-item>
      <button
        class="accordion-trigger"
        aria-expanded={item.isOpen ? 'true' : 'false'}
        aria-controls={`${accordionId}-content-${index}`}
        id={`${accordionId}-trigger-${index}`}
        data-accordion-trigger
      >
        <span class="accordion-title">{item.title}</span>
        <svg class="accordion-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M6 9l6 6 6-6"></path>
        </svg>
      </button>
      
      <div
        class="accordion-content"
        id={`${accordionId}-content-${index}`}
        aria-labelledby={`${accordionId}-trigger-${index}`}
        data-accordion-content
        style={item.isOpen ? 'display: block;' : 'display: none;'}
      >
        <div class="accordion-body" set:html={item.content}></div>
      </div>
    </div>
  ))}
</div>

<script>
  // Enhanced accordion functionality
  document.addEventListener('DOMContentLoaded', function() {
    const accordions = document.querySelectorAll('[data-accordion-multiple]');
    
    accordions.forEach(accordion => {
      const allowMultiple = accordion.getAttribute('data-accordion-multiple') === 'true';
      const triggers = accordion.querySelectorAll('[data-accordion-trigger]');
      
      triggers.forEach(trigger => {
        trigger.addEventListener('click', function() {
          const item = this.closest('[data-accordion-item]');
          const content = item.querySelector('[data-accordion-content]');
          const icon = this.querySelector('.accordion-icon');
          const isExpanded = this.getAttribute('aria-expanded') === 'true';
          
          // Close all other items if multiple not allowed
          if (!allowMultiple && !isExpanded) {
            triggers.forEach(otherTrigger => {
              if (otherTrigger !== this) {
                const otherItem = otherTrigger.closest('[data-accordion-item]');
                const otherContent = otherItem.querySelector('[data-accordion-content]');
                const otherIcon = otherTrigger.querySelector('.accordion-icon');
                
                otherTrigger.setAttribute('aria-expanded', 'false');
                otherItem.classList.remove('accordion-item-expanded');
                otherContent.style.display = 'none';
                otherIcon.style.transform = 'rotate(0deg)';
              }
            });
          }
          
          // Toggle current item
          if (isExpanded) {
            this.setAttribute('aria-expanded', 'false');
            item.classList.remove('accordion-item-expanded');
            content.style.display = 'none';
            icon.style.transform = 'rotate(0deg)';
          } else {
            this.setAttribute('aria-expanded', 'true');
            item.classList.add('accordion-item-expanded');
            content.style.display = 'block';
            icon.style.transform = 'rotate(180deg)';
          }
        });
      });
    });
  });
</script>

<style>
  .accordion-base {
    border-radius: 0.75rem;
    overflow: hidden;
  }
  
  .accordion-default {
    border: 1px solid var(--surface-border);
  }
  
  .accordion-bordered {
    border: 2px solid var(--surface-border);
  }
  
  .accordion-filled {
    background-color: var(--surface-elevated);
    border: 1px solid var(--surface-border-light);
  }
  
  .accordion-item {
    border-bottom: 1px solid var(--surface-border-light);
    transition: all var(--transition-medium);
  }
  
  .accordion-item:last-child {
    border-bottom: none;
  }
  
  .accordion-item-expanded {
    background-color: var(--surface-elevated);
  }
  
  .accordion-trigger {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    text-align: left;
    background: none;
    border: none;
    cursor: pointer;
    transition: all var(--transition-fast);
    color: var(--surface-on);
  }
  
  .accordion-trigger:hover {
    background-color: var(--surface-interactive);
  }
  
  .accordion-trigger:focus {
    outline: 2px solid var(--brand-accent);
    outline-offset: -2px;
  }
  
  .accordion-title {
    font-weight: 600;
    color: var(--surface-on);
  }
  
  .accordion-icon {
    width: 20px;
    height: 20px;
    color: var(--surface-on-variant);
    transition: transform var(--transition-medium);
    flex-shrink: 0;
  }
  
  .accordion-content {
    overflow: hidden;
    transition: all var(--transition-medium);
  }
  
  .accordion-body {
    color: var(--typography-body);
    line-height: 1.6;
  }
  
  .accordion-body p {
    margin: 0 0 var(--spacing-md) 0;
  }
  
  .accordion-body p:last-child {
    margin-bottom: 0;
  }
  
  .accordion-body ul,
  .accordion-body ol {
    margin: 0 0 var(--spacing-md) 0;
    padding-left: var(--spacing-lg);
  }
  
  .accordion-body li {
    margin-bottom: var(--spacing-xs);
  }
  
  /* Size Variants */
  .accordion-sm .accordion-trigger {
    padding: var(--spacing-sm) var(--spacing-md);
  }
  
  .accordion-sm .accordion-title {
    font-size: 0.875rem;
  }
  
  .accordion-sm .accordion-body {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: 0.875rem;
  }
  
  .accordion-md .accordion-trigger {
    padding: var(--spacing-md) var(--spacing-lg);
  }
  
  .accordion-md .accordion-title {
    font-size: 1rem;
  }
  
  .accordion-md .accordion-body {
    padding: 0 var(--spacing-lg) var(--spacing-md) var(--spacing-lg);
    font-size: 1rem;
  }
  
  .accordion-lg .accordion-trigger {
    padding: var(--spacing-lg) var(--spacing-xl);
  }
  
  .accordion-lg .accordion-title {
    font-size: 1.125rem;
  }
  
  .accordion-lg .accordion-body {
    padding: 0 var(--spacing-xl) var(--spacing-lg) var(--spacing-xl);
    font-size: 1rem;
  }
  
  /* Animation improvements */
  @media (prefers-reduced-motion: no-preference) {
    .accordion-content {
      transition: max-height var(--transition-medium) ease-out;
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .accordion-trigger,
    .accordion-icon,
    .accordion-content,
    .accordion-item {
      transition: none;
    }
  }
</style>
