---
// src/components/ui/Badge.astro
/**
 * Professional Badge Component
 * For status indicators, trust signals, and categorization
 */

interface Props {
  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info' | 'neutral';
  size?: 'sm' | 'md' | 'lg';
  rounded?: boolean;
  removable?: boolean;
  className?: string;
}

const {
  variant = 'primary',
  size = 'md',
  rounded = true,
  removable = false,
  className = ''
} = Astro.props;

const baseClasses = 'badge-base';
const variantClasses = {
  primary: 'badge-primary',
  secondary: 'badge-secondary',
  success: 'badge-success',
  warning: 'badge-warning',
  error: 'badge-error',
  info: 'badge-info',
  neutral: 'badge-neutral'
};
const sizeClasses = {
  sm: 'badge-sm',
  md: 'badge-md',
  lg: 'badge-lg'
};

const classes = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  rounded ? 'badge-rounded' : 'badge-square',
  removable ? 'badge-removable' : '',
  className
].filter(Boolean).join(' ');
---

<span class={classes}>
  <slot />
  {removable && (
    <button class="badge-remove" aria-label="Remove">
      <svg viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>
  )}
</span>

<style>
  .badge-base {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    transition: all var(--transition-fast);
    white-space: nowrap;
    user-select: none;
  }
  
  .badge-rounded {
    border-radius: 9999px;
  }
  
  .badge-square {
    border-radius: 0.375rem;
  }
  
  /* Variants */
  .badge-primary {
    background-color: var(--brand-primary);
    color: var(--brand-on-primary);
  }
  
  .badge-secondary {
    background-color: var(--brand-secondary);
    color: var(--brand-on-secondary);
  }
  
  .badge-success {
    background-color: var(--semantic-success);
    color: var(--semantic-on-success);
  }
  
  .badge-warning {
    background-color: var(--semantic-warning);
    color: var(--semantic-on-warning);
  }
  
  .badge-error {
    background-color: var(--semantic-error);
    color: var(--semantic-on-error);
  }
  
  .badge-info {
    background-color: var(--semantic-info);
    color: var(--semantic-on-info);
  }
  
  .badge-neutral {
    background-color: var(--surface-interactive);
    color: var(--surface-on-variant);
    border: 1px solid var(--surface-border);
  }
  
  /* Sizes */
  .badge-sm {
    padding: calc(var(--spacing-xs) * 0.5) var(--spacing-xs);
    font-size: 0.75rem;
    line-height: 1;
  }
  
  .badge-md {
    padding: var(--spacing-xs) var(--spacing-sm);
    font-size: 0.875rem;
    line-height: 1;
  }
  
  .badge-lg {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: 1rem;
    line-height: 1;
  }
  
  /* Removable functionality */
  .badge-removable {
    padding-right: calc(var(--spacing-xs) * 0.5);
  }
  
  .badge-remove {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.25em;
    height: 1.25em;
    border: none;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    color: currentColor;
    cursor: pointer;
    transition: background-color var(--transition-fast);
    margin-left: var(--spacing-xs);
  }
  
  .badge-remove:hover {
    background: rgba(255, 255, 255, 0.3);
  }
  
  .badge-remove svg {
    width: 0.75em;
    height: 0.75em;
  }
</style>
