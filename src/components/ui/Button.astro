---
// src/components/ui/Button.astro
/**
 * Advanced Button Component
 * Multi-variant, size-aware, theme-responsive button system
 */

interface Props {
  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'ghost' | 'link';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  fullWidth?: boolean;
  disabled?: boolean;
  loading?: boolean;
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
  icon?: string; // For future icon support
  iconPosition?: 'left' | 'right';
}

const {
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  disabled = false,
  loading = false,
  href,
  type = 'button',
  className = '',
  icon,
  iconPosition = 'left'
} = Astro.props;

const Tag = href ? 'a' : 'button';

const baseClasses = 'btn-base';
const variantClasses = {
  primary: 'btn-primary',
  secondary: 'btn-secondary', 
  success: 'btn-success',
  warning: 'btn-warning',
  ghost: 'btn-ghost',
  link: 'btn-link'
};
const sizeClasses = {
  xs: 'btn-xs',
  sm: 'btn-sm',
  md: 'btn-md',
  lg: 'btn-lg',
  xl: 'btn-xl'
};

const classes = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  fullWidth ? 'btn-full-width' : '',
  disabled ? 'btn-disabled' : '',
  loading ? 'btn-loading' : '',
  className
].filter(Boolean).join(' ');

const buttonProps = {
  ...(Tag === 'button' ? { type, disabled: disabled || loading } : {}),
  ...(Tag === 'a' ? { href, ...(disabled ? { 'aria-disabled': 'true' } : {}) } : {})
};
---

<Tag class={classes} {...buttonProps}>
  {loading && (
    <svg class="btn-spinner" viewBox="0 0 24 24" fill="none">
      <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" opacity="0.25"/>
      <path fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" opacity="0.75"/>
    </svg>
  )}
  <slot />
</Tag>

<style>
  .btn-base {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-sm);
    font-weight: 600;
    text-decoration: none;
    border: 2px solid transparent;
    border-radius: 0.75rem;
    transition: all var(--transition-medium);
    cursor: pointer;
    position: relative;
    white-space: nowrap;
    user-select: none;
    outline: none;
    font-family: inherit;
  }
  
  .btn-base:focus-visible {
    outline: 2px solid var(--brand-accent);
    outline-offset: 2px;
  }
  
  /* Variants */
  .btn-primary {
    background-color: var(--brand-primary);
    color: var(--brand-on-primary);
    border-color: var(--brand-primary);
    box-shadow: var(--shadow-sm);
  }
  
  .btn-primary:hover:not(.btn-disabled) {
    background-color: var(--brand-secondary);
    border-color: var(--brand-secondary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  
  .btn-secondary {
    background-color: transparent;
    color: var(--brand-primary);
    border-color: var(--brand-primary);
  }
  
  .btn-secondary:hover:not(.btn-disabled) {
    background-color: var(--brand-primary);
    color: var(--brand-on-primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
  }
  
  .btn-success {
    background-color: var(--semantic-success);
    color: var(--semantic-on-success);
    border-color: var(--semantic-success);
    box-shadow: var(--shadow-sm);
  }
  
  .btn-success:hover:not(.btn-disabled) {
    filter: brightness(1.1);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  
  .btn-warning {
    background-color: var(--semantic-warning);
    color: var(--semantic-on-warning);
    border-color: var(--semantic-warning);
    box-shadow: var(--shadow-sm);
  }
  
  .btn-warning:hover:not(.btn-disabled) {
    filter: brightness(1.1);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  
  .btn-ghost {
    background-color: transparent;
    color: var(--surface-on);
    border-color: var(--surface-border);
  }
  
  .btn-ghost:hover:not(.btn-disabled) {
    background-color: var(--surface-interactive);
    border-color: var(--brand-accent);
  }
  
  .btn-link {
    background-color: transparent;
    color: var(--brand-primary);
    border-color: transparent;
    text-decoration: underline;
    text-decoration-color: transparent;
  }
  
  .btn-link:hover:not(.btn-disabled) {
    text-decoration-color: currentColor;
    color: var(--brand-secondary);
  }
  
  /* Sizes */
  .btn-xs {
    padding: var(--spacing-xs) var(--spacing-sm);
    font-size: 0.75rem;
    border-radius: 0.5rem;
  }
  
  .btn-sm {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: 0.875rem;
    border-radius: 0.625rem;
  }
  
  .btn-md {
    padding: var(--spacing-sm) var(--spacing-lg);
    font-size: 1rem;
  }
  
  .btn-lg {
    padding: var(--spacing-md) var(--spacing-xl);
    font-size: 1.125rem;
    border-radius: 1rem;
  }
  
  .btn-xl {
    padding: var(--spacing-lg) var(--spacing-xxl);
    font-size: 1.25rem;
    border-radius: 1.25rem;
  }
  
  /* States */
  .btn-full-width {
    width: 100%;
  }
  
  .btn-disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  .btn-loading {
    pointer-events: none;
  }
  
  .btn-spinner {
    width: 1em;
    height: 1em;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Remove default button styles */
  .btn-base:where(button) {
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    font: inherit;
  }
</style>
