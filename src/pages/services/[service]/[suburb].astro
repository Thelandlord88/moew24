---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { findService, otherServices, type ServiceId } from '@/lib/services';
import { findSuburbBySlug, getAllSuburbs } from '@/lib/suburbs';
import { routes } from '@/lib/routes';
import NearbySuburbs from '@/components/NearbySuburbs.astro';

export const prerender = true;
export const trailingSlash = 'always';

export async function getStaticPaths() {
  const subs = getAllSuburbs().map(s => s.slug);
  const services: ServiceId[] = ['bathroom-deep-clean','spring-clean'];
  const paths = [];
  for (const suburb of subs) for (const service of services) paths.push({ params: { service, suburb } });
  return paths;
}

const { service: serviceSlug = '', suburb: suburbSlug = '' } = Astro.params;
const svc = findService(serviceSlug); const sub = findSuburbBySlug(suburbSlug);
const ok = Boolean(svc && sub);
const canonical = ok ? routes.services.serviceSuburb(svc!.slug, sub!.slug) : routes.services.index();
const site = Astro.site?.toString().replace(/\/$/, '') || '';
let title = 'Not found', description = 'Page not found.';
if (ok) { title = `${svc!.title} in ${sub!.name} | One N Done Bond Clean`; description = `${svc!.description} â€” Servicing ${sub!.name} and nearby areas.`; }
const ld = ok && {
  "@context":"https://schema.org","@type":"Service","@id":`${site}${canonical}#service`,
  name: `${svc!.title} in ${sub!.name}`, serviceType: svc!.title,
  areaServed: { "@type":"City", name: sub!.name, containedInPlace: { "@type":"AdministrativeArea", name: sub!.region || 'QLD' } },
  provider: { "@type":"LocalBusiness", "@id": `${site}#business` },
  offers: { "@type":"Offer", priceCurrency:"AUD", availability:"https://schema.org/InStock", url: `${site}${canonical}` }
};
function safeJsonLd(o:any){ return JSON.stringify(o).replace(/</g,"\\u003c"); }
---
<BaseLayout title={title} description={description} canonical={canonical}>
  {ok ? (
    <>
      <header class="mb-8">
        <h1 class="text-4xl font-extrabold tracking-tight">{svc!.title} <span class="text-sky-700">in {sub!.name}</span></h1>
        <p class="mt-3 text-slate-700 max-w-2xl">{svc!.description}</p>
        <div class="mt-6">
          <a href="/quote/" class="inline-flex items-center gap-3 bg-sky-700 text-white font-bold py-3 px-6 rounded-full shadow hover:bg-sky-800">
            {svc!.ctaLabel}
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24"><path d="M5 12h14M12 5l7 7-7 7"/></svg>
          </a>
        </div>
      </header>

      <section class="mb-10">
        <h2 class="text-2xl font-bold mb-4">What's included</h2>
        <ul class="grid sm:grid-cols-2 gap-3">
          {svc!.checklist.map(item => (
            <li class="flex items-start gap-2">
              <span class="mt-1 w-2 h-2 rounded-full bg-sky-600"></span>
              <span>{item}</span>
            </li>
          ))}
        </ul>
      </section>

      <section class="mb-8">
        <h2 class="text-xl font-semibold mb-3">More in {sub!.name}</h2>
        <ul class="flex flex-wrap gap-3 text-sm">
          {otherServices(svc!.slug).map(o => (
            <li><a class="px-3 py-1 rounded-full border hover:bg-slate-50" href={routes.services.serviceSuburb(o.slug, sub!.slug)}>{o.title}</a></li>
          ))}
          <li><a class="px-3 py-1 rounded-full border hover:bg-slate-50" href={routes.suburbs.suburb(sub!.slug)}>Suburb page</a></li>
          <li><a class="px-3 py-1 rounded-full border hover:bg-slate-50" href={routes.blog.index()}>Local guides</a></li>
        </ul>
      </section>

      <NearbySuburbs suburbSlug={sub!.slug} title="Other nearby areas" />
      <script type="application/ld+json" set:html={safeJsonLd(ld)} />
    </>
  ) : (
    <>
      {Astro.response.status = 404}
      <h1 class="text-3xl font-extrabold mb-2">Page not found</h1>
      <p class="text-slate-700 mb-6">We couldn't find that service/suburb combination.</p>
      <a class="underline" href={routes.services.index()}>Browse services</a>
    </>
  )}
</BaseLayout>
